# Generated by Django 4.2.23 on 2025-10-08 04:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sales_hub', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the product', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Product description', null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price of the product', max_digits=10)),
                ('category', models.CharField(choices=[('data_bundle', 'Data Bundle'), ('airtime', 'Airtime'), ('device', 'Device'), ('sim_card', 'SIM Card'), ('service', 'Service'), ('other', 'Other')], default='other', help_text='Product category', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the product is available for purchase')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Quantity purchased')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at the time of purchase', max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount paid (quantity Ã— unit price)', max_digits=10)),
                ('purchase_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When the purchase was made')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the purchase', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Purchase',
                'verbose_name_plural': 'Purchases',
                'ordering': ['-purchase_date'],
            },
        ),
        migrations.CreateModel(
            name='QuickServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_type', models.CharField(choices=[('puk_code', 'PUK Code Retrieval'), ('e_statement', 'E-Statement'), ('transaction_reversal', 'Transaction Reversal'), ('locked_device', 'Locked Device Finance'), ('nivushe_clearance', 'Nivushe Clearance Letter')], help_text='Type of Quick Service requested', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Quick Service Request',
                'verbose_name_plural': 'Quick Service Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('technical', 'Technical Issue'), ('billing', 'Billing Question'), ('service', 'Service Request'), ('complaint', 'Complaint'), ('other', 'Other')], default='technical', help_text='Type of support request', max_length=20)),
                ('subject', models.CharField(help_text='Brief description of the issue', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the issue')),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('waiting', 'Waiting on Customer'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', help_text='Current status of the request', max_length=20)),
                ('priority', models.PositiveSmallIntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Critical')], default=2, help_text='Priority level of the request')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the request was resolved', null=True)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes about how the issue was resolved', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Support Request',
                'verbose_name_plural': 'Support Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AlterModelOptions(
            name='interaction',
            options={'ordering': ['-timestamp'], 'verbose_name': 'Customer Interaction', 'verbose_name_plural': 'Customer Interactions'},
        ),
        migrations.RemoveField(
            model_name='interaction',
            name='follow_up_date',
        ),
        migrations.RemoveField(
            model_name='interaction',
            name='interaction_type',
        ),
        migrations.AddField(
            model_name='interaction',
            name='action_type',
            field=models.CharField(choices=[('call', 'Phone Call'), ('email', 'Email'), ('meeting', 'In-Person Meeting'), ('chat', 'Live Chat'), ('purchase', 'Purchase'), ('support', 'Support Request'), ('lead', 'Lead Activity'), ('other', 'Other')], default='call', help_text='Type of interaction or action taken', max_length=20),
        ),
        migrations.AddField(
            model_name='interaction',
            name='details',
            field=models.JSONField(blank=True, default=dict, help_text='Additional details about the interaction in JSON format'),
        ),
        migrations.AddField(
            model_name='interaction',
            name='timestamp',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='When this interaction occurred'),
        ),
        migrations.AlterField(
            model_name='interaction',
            name='agent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='interactions', to='sales_hub.agent'),
        ),
        migrations.AlterField(
            model_name='interaction',
            name='customer',
            field=models.ForeignKey(help_text='The customer this interaction is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='sales_hub.customer'),
        ),
        migrations.AlterField(
            model_name='interaction',
            name='notes',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name='interaction',
            index=models.Index(fields=['customer', 'timestamp'], name='sales_hub_i_custome_e740f2_idx'),
        ),
        migrations.AddIndex(
            model_name='interaction',
            index=models.Index(fields=['action_type', 'timestamp'], name='sales_hub_i_action__fc98ed_idx'),
        ),
        migrations.AddField(
            model_name='supportrequest',
            name='assigned_to',
            field=models.ForeignKey(blank=True, help_text='Agent assigned to handle this request', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_support_requests', to='sales_hub.agent'),
        ),
        migrations.AddField(
            model_name='supportrequest',
            name='customer',
            field=models.ForeignKey(help_text='The customer who submitted the request', on_delete=django.db.models.deletion.CASCADE, related_name='support_requests', to='sales_hub.customer'),
        ),
        migrations.AddField(
            model_name='quickservicerequest',
            name='assigned_agent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_services', to='sales_hub.agent'),
        ),
        migrations.AddField(
            model_name='quickservicerequest',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quick_service_requests', to='sales_hub.customer'),
        ),
        migrations.AddField(
            model_name='quickservicerequest',
            name='requested_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_services', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='purchase',
            name='agent',
            field=models.ForeignKey(blank=True, help_text='The agent who processed the sale', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sales', to='sales_hub.agent'),
        ),
        migrations.AddField(
            model_name='purchase',
            name='customer',
            field=models.ForeignKey(help_text='The customer who made the purchase', on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='sales_hub.customer'),
        ),
        migrations.AddField(
            model_name='purchase',
            name='product',
            field=models.ForeignKey(help_text='The product that was purchased', on_delete=django.db.models.deletion.PROTECT, related_name='purchases', to='sales_hub.product'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='sales_hub_p_categor_691c9e_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_active'], name='sales_hub_p_is_acti_fd42f1_idx'),
        ),
        migrations.AddIndex(
            model_name='supportrequest',
            index=models.Index(fields=['customer', 'status'], name='sales_hub_s_custome_bb6d07_idx'),
        ),
        migrations.AddIndex(
            model_name='supportrequest',
            index=models.Index(fields=['status', 'priority'], name='sales_hub_s_status_90e463_idx'),
        ),
        migrations.AddIndex(
            model_name='supportrequest',
            index=models.Index(fields=['assigned_to', 'status'], name='sales_hub_s_assigne_af9b8e_idx'),
        ),
        migrations.AddIndex(
            model_name='quickservicerequest',
            index=models.Index(fields=['customer', 'service_type'], name='sales_hub_q_custome_ae892c_idx'),
        ),
        migrations.AddIndex(
            model_name='quickservicerequest',
            index=models.Index(fields=['status'], name='sales_hub_q_status_8f1657_idx'),
        ),
        migrations.AddIndex(
            model_name='quickservicerequest',
            index=models.Index(fields=['created_at'], name='sales_hub_q_created_5034c3_idx'),
        ),
        migrations.AddIndex(
            model_name='purchase',
            index=models.Index(fields=['customer', 'purchase_date'], name='sales_hub_p_custome_c8f299_idx'),
        ),
        migrations.AddIndex(
            model_name='purchase',
            index=models.Index(fields=['product', 'purchase_date'], name='sales_hub_p_product_6c44a9_idx'),
        ),
    ]
